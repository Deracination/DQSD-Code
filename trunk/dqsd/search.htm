<html>
<!--
Dave's Quick Search Deskbar
Version 2.5.5 - February 4, 2002

Copyright (c) 2002 David Bau

Distributed under the terms of the
GNU Public License, Version 2 (http://www.gnu.org/copyleft/gpl.txt)

----

This deskbar lets you launch searches from the Windows Explorer Taskbar.
For the latest version and installation instructions, visit
<nobr><a href=http://notesbydave.com/toolbar/searchdoc.htm
  target=DavesDoc onclick=window.close()>Dave's site</a></nobr>.<ul>

* Type in your search terms and hit Enter to do a Google
  Search.

* If you're feeling lucky, go directly to Google's first
  hit using an exclamation point ("Crest toothpaste!").

* Look up phone numbers and email by using #
  or @ ("Piper Smith (Ithaca, NY)#", "Bob Jones@").

* Translate between English and other languages
  (en, zh, fr, de, it, ja, ko, pt, es)
  by saying "some words en-es".

* Convert between currencies by saying "100 usd>gbp".

* Calculate math expressions by just typing them in
  <nobr>("4*(pi-3)", <wbr>"pow(1.06,30)").</nobr>

* Use ctrl-P and ctrl-N for a history of your previous searches.
  Type "!<em>prefix</em>" first to go through only matching entries.

* A clock shows after a few seconds. Right-click to see a calendar.

* Here are some more query codes you can use:

</ul><center><table>
# (this table is automatically generated)
</table></center>

<p>
If you want to make additions or improvements, please do.
The deskbar is customizable and completely open-source.

<ul>
* Edit <a href="view-source:preferences.js">preferences.js</a>
  to customize your clock, default search, fonts, colors, and so on.

* Shortcuts are defined in <a href="view-source:aliases.txt">aliases.txt</a>;
  the menu in <a href="view-source:menu.txt">menu.txt</a>.

* The search bar is just an HTML page:
  <a href="view-source:search.htm">search.htm</a>.

* You can add new searches by editing
  <a href="view-source:search.xml">search.xml</a>.

* After editing the code, type "!" in the search bar to reload it.

* If you have questions or contributions, please post them to the
  <a target=dqsdd onclick=window.close() href="http://groups.yahoo.com/group/dqsdd">discussion group</a>
  and share them with the community.
</ul>

-->

<title>Search</title>

<xml id='searchxml' src='search.xml'></xml>

<script>
// configuration settings

defaultcal="yhocal";           // yahoo is the default calendar
eventsfileurl="";              // default no events

historylength=50;              // number of searches to remember

clock=true;                    // set to false to remove clock
clockdelay=5000;               // clock will appear after 5 secs
clockupdate=1000;              // clock will update every 1 sec
clocklongwidth=139;            // pixels for the long form
clocklongform=" EEE d MMM yyyy h:mm A "; // long clock format string
clockshortform=" h:mm A ";     // short clock format string
clocktooltipform="";           // tooltip clock format string
clockstyle="";                 // css style overrides for the clock

txtfldstyle="";                // css style overrides for the text field
buttonstyle="";                // css style overrides for the button
menustyle="";                  // css style overrides for the menu
localsearchurl="localsearch.xml"; // local search file
localaliases="localaliases.txt";  // local aliases file
helptime=8500;                 // help message shows for 8.5 secs
launchmode=2;                  // 0 = use ie; 1 = default browser; 2 = auto
reuseBrowserWindowMode=0;      // 0=new window always; 1=single window for all; 2=single window for each search type
multiline=true;                // Use a mult-line search field instead of a single line
alertmode=0;                   // 0=no qualified alerts; 1=all qualified alerts

language=navigator.userLanguage.substr(0,2);

showbutton=2;
buttonalign="right";

cal=true;
calwidth=179;
calheight=156;
calbackground="menu";
caltextcolor="menutext";
calhighbackground="highlight";
calhightext="highlighttext";
caleventdaybackground="menu";
caleventdaytext="red";
caltodayeventbackground="window";
caltodayeventtext="red";
caltodaybackground="window";
caltodaytext="windowtext";
calgraybackground="menu";
calgraytext="graytext";
calmonthstyle="font-family:Tahoma;font-size:8pt;font-weight:bold";
calnavstyle="font-family:Tahoma;font-size:8pt;font-weight:bold;border-width:1;border-style:solid;border-color:menu";
caldaystyle="font-family:Tahoma;font-size:8pt;border-width:1;border-style:solid;border-color:menu";
caldowstyle="font-family:Tahoma;font-size:8pt;border-width:1;border-style:solid;border-color:menu";
caltodaystyle="font-family:Tahoma;font-size:8pt;font-weight:bold;border-width:1;border-style:solid;border-color:windowtext";
caleventdaystyle="font-family:Tahoma;font-size:8pt;border-width:1;border-style:solid;border-color:menu" + ";color:" + caleventdaytext;
caltodayeventstyle="font-family:Tahoma;font-size:8pt;font-weight:bold;border-width:1;border-style:solid;border-color:windowtext" + ";color:" + caltodayeventtext;


// catch errors
function handleerror(msg, url, lineno)
{
  if (!firsterror)
  {
     firsterror = msg;
     alert("Error (line " + lineno + "):\n" + msg);
  }
  return true;
}
firsterror = null;
// window.onerror=handleerror;


function qualifiedalert(s)
{
  alertmode && alert(s);
}
</script>

<style>
body
{
 margin: 0px;
 border: 0;
 padding: 0;
 background-color: threedface;
}
td
{
 font: menu;
}
.txtfld
{
 font: menu;
 background-color: window;
 color: windowtext;
 border-style: inset;
 padding-top:2px;
 padding-left:2px;
 padding-right:2px;
 padding-bottom:3px;
 margin:0px;
 position:absolute;
 overflow:hidden;
 word-break:break-all;
}
.clock
{
 font:menu;
 background-color: window;
 color: windowtext;
 border-style: inset;
 padding-top:2px;
 padding-left:2px;
 padding-right:2px;
 padding-bottom:3px;
 margin:0px;
 position:absolute;
 cursor:hand;
 text-align:right;
 overflow:hidden;
}
.gobutton
{
 font:menu;
 padding-bottom:1px;
 padding-top:1px;
 padding-right:1px;
 padding-left:1px;
 border:2px;
 border-style:solid;
 border-color:threedface;
 background-color:threedface;
 color:buttontext;
 margin:0px;
 position:absolute;
}
.mogobutton
{
 font:menu;
 padding-bottom:1px;
 padding-top:1px;
 padding-right:1px;
 padding-left:1px;
 border:2px;
 border-style:outset;
 border-color:window;
 background-color:threedface;
 color:buttontext;
 margin:0px;
 position:absolute;
}
.mdgobutton
{
 font:menu;
 padding-bottom:1px;
 padding-top:1px;
 padding-right:1px;
 padding-left:1px;
 border:2px;
 border-style:inset;
 border-color:window;
 background-color:threedface;
 color:buttontext;
 margin:0px;
 position:absolute;
}
</style>

<script>
<!--
uaMatch=navigator.userAgent.toLowerCase().match("msie\\s+(\\d+\\.\\d*)");
ie_version=(uaMatch ? parseFloat(uaMatch[1]) : 0.0);
-->
</script>

<!-- Optional local script file for overriding settings defined above -->
<script src=preferences.js></script>

<!-- include local search file and apply style overrides -->
<script>
  document.write("<xml id='localsearch' src='" + localsearchurl + "'></xml>");

  document.write("<style>.txtfld{" + txtfldstyle + "} " +
                        ".gobutton{" + buttonstyle + "} " +
                        ".mogobutton{" + buttonstyle + "} " +
                        ".mdgobutton{" + buttonstyle + "} " +
                        ".clock{" + clockstyle + "}</style>");
  actualmenustyle =
      "background:menu;height:18px;cursor:default;" +
      "color:menutext;font-family:Tahoma;padding:1px;font-size:8pt;" +
      menustyle;

</script>

<body onload=strt() scroll=no>

<script>
init = true;
selfdrag = false;

// def() called when the user hits "enter" in the textbox
function def()
{
  // handle things like !! and !foo
  if (!recent()) return false;

  // grab the contents
  var t = document.deff.q.value;

  // question mark only: show help
  if (t == "?")         { about(); return false; }

  // exclamation mark only: refresh
  if (t == "!")         { reload(); return false; }

  // anything below adds something to the history
  addhist(t);

  // detect special commands
  if (!special(t))
  {
    // detect translations
    if (translate(t)) return false;

    // detect URLs, filenames, etc to open directly
    if (direct(t)) return false;

    // detect strings that look like phone numbers
    if (phoneno(t)) return false;

    // detect strings that look like currency conversions
    if (currency(t)) return false;

    // detect math expressions
    if (mathexp(t)) return false;
  }

  // try to execute a shortcut - this should perform the default search
  if (shortcut(t)) return false;

  // if there isn't even a default search, do a google search
  performsearch("gg", t);
  return false;
}


// detect and strip suffix or prefix and call function
function shortcut(t)
{
  // look for matching commands first
  var search = null;
  var term = null;
  var result = t.match(/^([a-zA-Z]+)\b/)
  if (result)
  {
    if (aliases[result[1]])
    {
      search = aliases[result[1]];
      term = t.slice(result[1].length);
    }
  }

  // then look for longest matching punctuation prefix
  if (!search)
  {
    result = t.match(/^([\s~`!@#$%\^&\*()\-=\+{}\[\];:'<>,\.\/\?]+)/);
    if (result)
    {
      for (var subs = result[1].length; subs>0; subs--)
      {
        search = aliases[result[1].slice(0, subs)];
        if (search)
        {
          term = t.slice(subs);
          break;
        }
      }
    }
  }

  // then look for longest matching punctuation suffix
  if (!search)
  {
    result = t.match(/([\s~`!@#$%\^&\*()\-=\+{}\[\];:'<>,\.\/\?]+)$/);
    if (result)
    {
      for (var subs = result[1].length; subs>0; subs--)
      {
        search = aliases[result[1].slice(-subs)];
        if (search)
        {
          term = t.slice(0, -subs);
          break;
        }
      }
    }
  }

  // no match, look for empty shortcut
  if (!search && aliases[""])
  {
    search = aliases[""];
    term = t;
  }

  // no match, no dice
  if (!search)
    return false;
    
  // execute search
  performsearch(search, term);  
  return true;
}


function performsearch( fname, term )
{
  var switches = [], i = 0, arg = null, appterm = "";
  
  term = term.replace(/^\s*/, '').replace(/\s*$/, '');            // strip out leading and trailing spaces
  while( (arg = term.match(/\/(\w+)\s*$/)) != null )              // search for possible switches in term
  {
    var arg1 = arg[1].toLowerCase();
    for( var j=0; j < searches[fname].switches.length; j++ )      // check if the switch found matches any registered values
      if( arg1 == searches[fname].switches[j].substring(0,arg[1].length) ) 
      {                                                           // we have a possible partial or full match
        var dup = false;
        
        if( arg1 != searches[fname].switches[j] )               // check to see this is a unique partial match
          for( var k=0; k < searches[fname].switches.length; k++ )
            if( arg1 == searches[fname].switches[k].substring(0,arg[1].length)
                && searches[fname].switches[k] != searches[fname].switches[j] )
              dup = true;       
        
        for( var k=0; k < switches.length; k++ )                  // make sure we haven't added this switch to the list already
          if( switches[k] == searches[fname].switches[j] )
            dup = true;
        
        if( dup == false )
        {
          switches[i] = searches[fname].switches[j];              // everything looks good, so add the switch
          break;
        }
      }
    
    appterm = (switches[i] ? appterm : term.substring( term.length - arg1.length - 1, 
                                       term.length ) + (appterm ? " " + appterm : ""));
    term = term.substring( 0, term.length - arg1.length - 1 ).replace(/\s*$/, '');
    if( switches[i] ) i++;
  }
  
  // because we parse the string backwards, we need to switch the data around so
  // that it reflects the order in which it was typed and not confuse the search programmer
  if( switches )
  {
    var tmp = [];
    for( var i=0; i < switches.length; i++ )
      tmp[i] = switches[switches.length-i-1];
    switches = tmp;
  }
  
  if (searches[fname])  
  searches[fname].fun(term + (appterm ? " " + appterm : ""), switches );
  else
    eval(fname + "()");
}


// a way of executing a specific search while adding the right symbol to the history
function mnu(text, sym)
{
  addhist(document.deff.q.value + sym);
  performsearch( text, document.deff.q.value );
}


function containsalias(s, t)
{
  if (t.length >= s.length)
  {
    if (s.match(/^[a-zA-Z]+$/))
    {
      if (t.match("^" + s + "\\b"))
        return true;
    }
    else if (t.slice(t.length-s.length) == s)
    {
      return true;
    }
    else if (t.slice(0, s.length) == s)
    {
      return true;
    }
  }
  return false;
}


// detect specials
function special(t)
{
  for (var i = 0; i < specialaliasarray.length; i++)
  {
    if (containsalias(specialaliasarray[i], t))
    {
      return true;
    }
  }
  return false;
}

// detect URLs, local filenames, etc to open directly
function direct(t)
{
  // detect strings that look like URLs or filenames
  prot = new RegExp("^(http://|https://|ftp://)([\\-a-z0-9]+\\.)*[\\-a-z0-9]+" +
                    "|^[a-z]:($|\\\\)" +
                    "|^\\\\\\\\[a-z0-9]+($|\\\\($|[a-z0-9]+($|\\\\)))", "i");
  if (prot.exec(t))
  {
    openSearchWindow(t);
    return true;
  }

  // detect strings that look like DNS names
  dns = new RegExp("^www\.([\\-a-z0-9]+\\.)+[\\-a-z0-9]+(/\\S*)?$" +
                   "|^([\\-a-z0-9]+\\.)+(com|net|org|edu|gov|mil|[a-z]{2})(/\\S*)?$", "i");
  if (dns.exec(t))
  {
    openSearchWindow("http://" + t);
    return true;
  }
  return false;
}


// handle onkeypress: cut-copy-paste, ctrl-n, ctrl-p for next and previous
// we need to do this because for some reason it's not done for us when
// we're docked in the taskbar!
function okp()
{
  if (window.event.keyCode != 14 && window.event.keyCode != 16
      && window.event.keyCode != 3 && window.event.keyCode != 22
      && window.event.keyCode != 24 && window.event.keyCode != 10
      && window.event.keyCode != 13)
    return true;

  if (window.event.keyCode == 13)
  {
    def();
    return false;
  }
  
  // ctrl-enter just like IE's address bar - Joel's suggestion
  if (window.event.keyCode == 10)
  {
    var origt = document.deff.q.value;
    var t = origt;

    // trim leading and trailing whitespace and punctuation
    t = t.replace(/^[\s~`!@#$%\^&\*()\-=\+{}\[\];:'<>,\.\/\?]*/, '')
         .replace(/[\s~`!@#$%\^&\*()\-=\+{}\[\];:'<>,\.\/\?]*$/, '');

    // append .com if it looks like it needs it
    dns = new RegExp("^([\\-a-z0-9]+\\.)+(com|net|org|edu|gov|mil|[a-z]{2})(/\S*)?$", "i");
    if (!dns.exec(t))
    {
      var slashpos = t.indexOf('/');
      if (slashpos < 0) slashpos = t.length;
      t = t.substr(0, slashpos) + ".com" + t.substr(slashpos);
    }

    // prepend www. if there are fewer than three parts in the dns name
    if (!t.match(/^[\w\-]+\.[\w\-]+\.[\w\-]+/))
      t = "www." + t;

    // if it all looks good as a dns name, then history it
    if (direct(t) || direct(t = origt))
    {
       document.deff.q.value = t;
       addhist(t);
       document.deff.q.createTextRange().select();
    }

    return false;
  }
  if (window.event.keyCode == 3)
  {
    range = document.selection.createRange();
    range.execCommand("Copy");
    return false;
  }
  if (window.event.keyCode == 22)
  {
    range = document.selection.createRange();
    if (range.parentElement().name != "q") return true;
    range.execCommand("Paste");
    range.collapse(false);
    range.scrollIntoView(false);
    return false;
  }
  if (window.event.keyCode == 24)
  {
    range = document.selection.createRange();
    if (range.parentElement().name != "q") return true;
    range.execCommand("Cut");
    return false;
  }


  // handle ctrl-p and ctrl-n for history
  if (window.event.keyCode == 16)
    prevnext(-1);
  else
    prevnext(1);
    
  return false;
}

// onkeydown: handle the up and down arrow keys for history
function okd()
{
  if (window.event.keyCode != 38 && window.event.keyCode != 40)
    return true;
  if (window.event.keyCode == 38)
    prevnext(-1);
  else
    prevnext(1);

  return false;
}

function prevnext(direction)
{
  // save the value in the history edit buffer
  histeditmove(document.deff.q.value, direction);

  // work around a weird bug
  if (document.deff.q.value == "")
    document.deff.q.value = ".";

  document.deff.q.value = currhistedit();
  var range = document.deff.q.createTextRange();
  if (range.parentElement().name != "q") { return; }
  range.collapse(false);
  range.scrollIntoView(false);
  range.select();
}

// show the text "Quick Search"
function showQuickSearch()
{
  document.selection.empty();
  document.deff.q.value = local(QUICK_SEARCH);
}

// strt() called on page load; show help message after 4 seconds
function strt()
{
  rsz();

  if (!clock || clockdelay > 0)
    showQuickSearch();

  if (helptime > 0)
    startbanner(clockdelay);
  else
    startclock(clockdelay);
}

bant = null;

// starts the banner timer
function startbanner(delay)
{
  bant=window.setTimeout("banner();", delay);
}

// banner() called to display help message for 8.5 seconds
function banner()
{
  document.deff.q.value = local(HELP_TEXT);
  bant=window.setTimeout("unbanner();", helptime);
}

// called when the banner naturally goes away
function unbanner()
{
  stopbanner();
  if (!clock || clockdelay >0)
    showQuickSearch();
  startclock(clockdelay);
}

// called to forcibly clear the banner
function stopbanner()
{
  stopclock();
  if (bant)
    window.clearTimeout(bant);
}

// clr() called when the texbox is given focus
function clr()
{
  if (init)
  {
    document.deff.q.value="";
    init = false;
  }
  stopbanner();
  document.deff.q.className = "txtfld";
  document.deff.q.value=currhistedit();
  range = document.deff.q.createTextRange();
  range.select();
}

// dodragover() called when dragging over the textbox
function dodragover()
{
  clr();
  window.event.dataTransfer.dropEffect='copy';
  window.event.returnValue = false;
}

// dodrop() called when something is dropped on the textbox
function dodrop()
{
  if (selfdrag) return true;
  
  if (init)
    init = false;
  stopbanner();

  window.event.returnValue=false;
  window.event.dataTransfer.dropEffect='copy';
  var q = event.dataTransfer.getData("Text");

  // trim leading and trailing whitespace and punctuation
  q = q.replace(/^[\s~`!@#$%\^&\*()\-=\+{}\[\];:'<>,\.\/\?]*/, '')
       .replace(/[\s~`!@#$%\^&\*()\-=\+{}\[\];:'<>,\.\/\?]*$/, '');
  document.deff.q.value = q;

  rst();
  mnu( aliases[""], "");
}

// rst() called when the texbox loses focus
function rst()
{
  histeditmove(document.deff.q.value, 0);
  if (init == false && document.deff.q.value=="")
  {
    init = true;
    if (!clock || clockdelay > 0)
      showQuickSearch();
  }
  startclock(clockdelay);
}


function reload()
{
  closeabout();
  window.location.reload(false);
}
</script>
  <table align=left
        border=0
        cellpadding=0
        cellspacing=0>
   <tr>
   <form name=deff
         target=_blank
         action=http://www.google.com/search
         method=get
         onsubmit="return def();">
     <td>
     <nobr>
     <script>
document.write(
  (multiline ? '<textarea ' : '<input ')
  + 'name=q '
  + 'type=text '
  + 'class=txtfld '
  + 'onfocus=clr() '
  + 'ondragstart="selfdrag=true;" '
  + 'ondragend="selfdrag=false;" '
  + 'ondragover=dodragover() '
  + 'ondrop=dodrop() '
  + 'onblur=rst() '
  + 'onhelp=showpop() '
  + 'oncontextmenu="return showcal();" '
  + 'onkeydown="return okd();" '
  + 'onkeypress="return okp();" '
  + 'value="" '
  + 'cols=20 '
  + 'rows=1 '
  + 'maxlength=256 '
  + 'tabindex=0 '
  + 'style=top:-100 '
  + 'autocomplete=off>'
  + (multiline ? '</textarea>' : ''));

dopopup = (ie_version >= 5.5);

if (dopopup)
{
  document.write(
    "<input class=gobutton type=button"
  + "       name=gobutton"
  + "       value=&#xBB;"
  + "       onmousedown=this.className='mdgobutton';showpop();"
  + "       ondblclick=showpop();"
  + "       oncontextmenu=\"return showcal();\""
  + "       onmouseup=this.className='mogobutton'"
  + "       onmouseover=this.className='mogobutton'"
  + "       onmouseout=this.className='gobutton'"
  + "       style=top:-100"
  + "       tabindex=-1>");
}
</script>
</nobr>
    </td>
   </form>
  </tr>
  <tr cellpadding=0>
   <td id=info style="display:none">
    <img width=0 height=36><br>
    <b><a style=text-decoration:none;color:black href=http://notesbydave.com/toolbar/searchdoc.htm target=_blank tabindex=-1>
      Dave's Quick Search Deskbar</a></b>
    <br>
    Designed to be placed on the Windows taskbar.<br>
    For documentation,
    <a href="about:" onclick="about(); return false;" tabindex=-1>click here</a>.
   </td>
  </tr>
 </table>

<script src="tools.js"></script>
<script src="strings.js"></script>
<script src="loader.js"></script>
<script src="history.js"></script>
<script src="helpbox.js"></script>
<script src="helpmenu.js"></script>
<script src="calculate.js"></script>
<script src="translate.js"></script>
<script src="currency.js"></script>
<script src="phoneno.js"></script>
<script src="clock.js"></script>
<script src="calendar.js"></script>

<script>
// show localized title string
document.title=local(SEARCH_TITLE);


// eliminate Go button if window is narrow
gowidth = -1;
textheight = -1;

function rsz()
{
  if (gowidth < 0)
  {
    if (dopopup)
       gowidth = document.deff.gobutton.offsetWidth;
    else
       gowidth = 0.0;

    originaltextheight = document.deff.q.offsetHeight;
    originaltextheight = originaltextheight + 3;
    document.deff.q.style.height = originaltextheight;
  }

  if (document.body.clientHeight > 256 && document.body.clientWidth > 256)
  {
    document.all.info.style.display="block";
    document.deff.q.style.display="block";
    document.deff.q.style.top=0;
    document.deff.q.style.height = originaltextheight;
  }
  else
  {
    document.all.info.style.display="none";
    document.deff.q.style.display="block";
    document.deff.q.style.top=0;
    document.deff.q.style.height = document.body.clientHeight;
  }

  var targetwidth = document.body.clientWidth - gowidth;

  if(dopopup)
  {
    if((showbutton == 1) || ((showbutton == 2) && (targetwidth >= clocklongwidth)))
    {
      document.deff.gobutton.style.display ="inline";
      if (buttonalign == "left")
      {
        document.deff.q.style.left         = gowidth;
        document.deff.gobutton.style.left  = 0;
      }
      else
      {
        document.deff.q.style.left         = 0;
        document.deff.gobutton.style.left  = targetwidth;
      }
      document.deff.gobutton.style.top     = 0;
      document.deff.gobutton.style.height  = document.deff.q.offsetHeight;
    }
    else
    {
      document.deff.gobutton.style.display = "none";
      document.deff.q.style.left           = 0;
      targetwidth                          = document.body.clientWidth;
    }
  }

  if (targetwidth < clocklongwidth)
    clockformat = clockshortform;
  else
    clockformat = clocklongform;

  document.deff.q.style.width=(targetwidth < 0 ? 0 : targetwidth);

  if (clockrunning)
     paintclock();
}

rsz();
document.body.onresize=rsz;

</script>



