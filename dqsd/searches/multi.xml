<search function="multi">
  <name>MultiSearch</name>
  <description>Multi search allows the user to run multiple searches with
one command line expression: "multi av gg wood planes" will search both alta
vista and google for "wood planes".</description>
  <contributor>Neel Doshi</contributor>
  <category>Other</category>
  <script><![CDATA[
   // This function is almost identical to the shortcut function in search.html
   function isCommand(t)
   {
   // look for matching commands first
   var search = null;
   var term = null;
   var result = t.match(/^([a-zA-Z]+)\b/)
   if (result)
   {
     if (aliases[result[1]])
     {
       search = aliases[result[1]];
       term = t.slice(result[1].length);
     }
   }

   // then look for longest matching punctuation prefix
   if (!search)
   {
     result = t.match(/^([\s~`!@#$%\^&\*()\-=\+{}\[\];:'<>,\.\/\?]+)/);
     if (result)
     {
       for (var subs = result[1].length; subs>0; subs--)
       {
         search = aliases[result[1].slice(0, subs)];
         if (search)
         {
           term = t.slice(subs);
           break;
         }
       }
     }
   }

   // then look for longest matching punctuation suffix
   if (!search)
   {
     result = t.match(/([\s~`!@#$%\^&\*()\-=\+{}\[\];:'<>,\.\/\?]+)$/);
     if (result)
     {
       for (var subs = result[1].length; subs>0; subs--)
       {
         search = aliases[result[1].slice(-subs)];
         if (search)
         {
           term = t.slice(0, -subs);
           break;
         }
       }
     }
   }

   // no match, no dice
   if (!search)
     return false;

      // return the proper search term for the asking procedure
      return search;
   }

    function multi(q)
    {
      if (q == "")
      {
        alert("Multisearch needs at least one search type parameter.");
        return false;
      }
      else
        if (result = q.split( /[,\s]+/ ) )
        {

          arrCmds = new Array(0);
          arrParams = new Array(0);

          // Loop through the arguments to filter out the commands.
          // if an argument is not a command, then no future arguments
          // can be commands either.  The following variable keeps track of this.
          var fLoopBool = 1;

          for ( var i = 1; i <= result.length; i++ )
          {
            strCommandName = isCommand(result[i - 1])
            if (strCommandName != false && fLoopBool == 1)
            {
              // Append the command list with this command
              arrCmds.push(strCommandName);
            }
            else
            {
              // Set the fLoopBool to zero since no more commands should be found
              fLoopBool = 0;

              // Append the parameter string with this word
              arrParams.push(result[i - 1]);
            }
          }
          // Loop through the command list and perform the search
          if (arrCmds.length == 0)
          {
            alert("Multisearch needs at least one search type parameter.");
            return false;
          }
          else
          {
            // Perform each of the searches
            for ( var j = 1; j <= arrCmds.length; j++ )
              performsearch(arrCmds[j - 1], arrParams.join(" "));
              return true;
          }
        }
      }
  ]]></script>
</search>
