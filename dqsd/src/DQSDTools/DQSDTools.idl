// DQSDTools.idl : IDL source for DQSDTools.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (DQSDTools.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
		uuid(1A93D4C6-A0B1-41EC-8153-FD7F5500CEA0),
		dual,
		oleautomation,
		helpstring("DQSD Launcher Interface"),
		pointer_default(unique)
	]
	interface ILauncher : IDispatch
	{
		[id(1), helpstring("Submits form using default browser. Pass a FORM object.")] HRESULT SubmitForm([in] VARIANT idForm);
		[id(2), helpstring("Opens document in associated application. Pass a document URI.")] HRESULT OpenDocument([in] BSTR strDoc, [in,optional] VARIANT* strParameters);
		[propget, id(3), helpstring("Path of default browser executable")] HRESULT pathDefaultBrowser([out, retval] BSTR *pVal);
		[propput, id(4), helpstring("Debug setting")] HRESULT Debug( [in] VARIANT_BOOL bDebug );
		[propget, id(4), helpstring("Debug setting")] HRESULT Debug( [out,retval] VARIANT_BOOL *pbDebug );
		[id(5), helpstring("Return the contents of the specified file as a string")] HRESULT ReadFile([in] BSTR bstrFilename, [out,retval] BSTR* pbstrResult);
		[id(6), helpstring("Write the string to the specified file")] HRESULT WriteFile([in] BSTR bstrFilename, [in] BSTR bstrValue);
		[id(7), helpstring("Get protocol handler for specified protocol")] HRESULT GetProtocolHandler([in] BSTR bstrProtocol, [out,retval] BSTR* pbstrHandler);
		[id(8), helpstring("Get list of files matching file spec")] HRESULT GetFiles([in] BSTR bstrFileSpec, [out,retval] BSTR* pbstrFiles);
		[id(9), helpstring("Install the keyboard hook which provides full key support (DEL, arrows, etc)")] HRESULT InstallKeyboardHook([in] LPDISPATCH pDispDocument);
		[id(10), helpstring("Register a key to be used with the Windows key to jump to the DQSD bar")] HRESULT RegisterHotKey([in] long hotkeyVkCode, [in] BSTR bstrModifierName, [in] LPDISPATCH pDispDocument);
		[id(11), helpstring("Map a virtual key code to a character code to be sent to the DQSD bar")] HRESULT MapKeyCode(long lVKCode, long lCharCode);
		[propget, id(12), helpstring("Check if the DLL is of at least the specified version")] HRESULT VersionIsCorrect(int v1, int v2, int v3, int v4, [out, retval] VARIANT_BOOL *pVal);
		[id(14), helpstring("method ShutdownBar")] HRESULT ShutdownBar([in] LPDISPATCH pDispDocument);
		[id(15), helpstring("Attempt to refresh taskbar tray icons")] HRESULT RefreshTrayIcons();
		[propget, id(16), helpstring("InstallationDirectory")] HRESULT InstallationDirectory([out,retval] BSTR *pbstrDirectory);
		[id(17), helpstring("method GetSpecialFolderLocation")] HRESULT GetSpecialFolderLocation([in] BSTR bstrSpecialFolder, [out,retval] BSTR* pbstrLocation);
		[id(18), helpstring("method GetFolders")] HRESULT GetFolders([in] BSTR bstrBaseFolder, [out,retval] BSTR* pbstrFolders);
		[id(19), helpstring("method FileExists")] HRESULT FileExists([in] BSTR bstrBaseFolder, [out,retval] VARIANT_BOOL *pbExists);
		[id(20), helpstring("method RenameFile")] HRESULT RenameFile([in] BSTR bstrFromFile, [in] BSTR bstrToFile);
		[propget, id(21), helpstring("AppDataDirectory")] HRESULT AppDataDirectory([out,retval] BSTR *pbstrDirectory);
		[id(22), helpstring("method CreateDirectory")] HRESULT CreateDirectory([in] BSTR bstrDirectory);
		[id(23), helpstring("method DisplayUserOptions")] HRESULT DisplayUserOptions();
	};
	[
		object, 
		uuid(C20983D5-DFC2-4C10-8267-E23217466E28),
		dual,
		helpstring("IMenuBuilder Interface"),
		pointer_default(unique)
	]
	interface IMenuBuilder : IDispatch
	{
		[id(1), helpstring("method Display")] HRESULT Display( [in] LPDISPATCH pDispDocument, [out,retval] VARIANT* pvarSelection);
		[id(2), helpstring("method AppendMenuItem")] HRESULT AppendMenuItem([in] BSTR bstrItem, [in] BSTR bstrKey, [in] BSTR bstrToolTip, [in,optional] VARIANT* hmenu);
		[id(3), helpstring("method AppendSubMenu")] HRESULT AppendSubMenu([in] BSTR bstrName, [in,optional] VARIANT* hParentMenu, [out,retval] long* phmenu);
		[id(4), helpstring("method AppendSeparator")] HRESULT AppendSeparator([in,optional] VARIANT* pvParentMenu);
		[propget, id(5), helpstring("property HorizontalAlignment")] HRESULT HorizontalAlignment([out, retval] short *pVal);
		[propput, id(5), helpstring("property HorizontalAlignment")] HRESULT HorizontalAlignment([in] short newVal);
		[id(6), helpstring("method InitialiseTooltips")] HRESULT InitialiseTooltips([in] long displayTimeMultiplier);
		[id(7), helpstring("method InsertMenuItem")] HRESULT InsertMenuItem([in] BSTR bstrItem, [in] BSTR bstrKey, [in] BSTR bstrToolTip, [in] UINT position, [in,optional] VARIANT* hmenu);
		[id(8), helpstring("method InsertSeparator")] HRESULT InsertSeparator([in] UINT position, [in,optional] VARIANT* hParentMenu);
		[id(9), helpstring("method InsertSubMenu")] HRESULT InsertSubMenu([in] BSTR bstrName, [in] UINT position, [in,optional] VARIANT* hParentMenu, [out,retval] long* phmenu);
		[id(10), helpstring("method GetMenuItemCount")] HRESULT GetMenuItemCount([in,optional] VARIANT* hParentMenu, [out,retval] long* pCount);
		[id(11), helpstring("method FindSubMenu")] HRESULT FindSubMenu([in] BSTR bstrName, [in,optional] VARIANT* hParentMenu, [out,retval] long* phmenu);
		[id(12), helpstring("method FindMenuItem")] HRESULT FindMenuItem([in] BSTR bstrName, [in,optional] VARIANT* hParentMenu, [out,retval] long* pPosition);
		[id(13), helpstring("method GetMenuString")] HRESULT GetMenuString([in] UINT position, [in,optional] VARIANT* hParentMenu, [out, retval] BSTR* pbstrResult);
		[id(14), helpstring("method GetMenuItemID")] HRESULT GetMenuItemID([in] UINT position, [in,optional] VARIANT* hParentMenu, [out, retval] long* nID);
		[id(15), helpstring("method EnableMenuItem")] HRESULT EnableMenuItem([in] UINT position, [in,optional] VARIANT* hParentMenu);
		[id(16), helpstring("method DisableMenuItem")] HRESULT DisableMenuItem([in] UINT position, [in,optional] VARIANT* hParentMenu);
	};

[
	uuid(4323AAF6-488C-4921-A605-6E22E13332E4),
	version(1.0),
	helpstring("Dave's Quick Search Deskbar Tools 1.0 Library")
]
library DQSDTOOLSLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(FA8211C1-F85B-4CCD-8C51-1587A37E566A),
		helpstring("DQSD Launcher Object")
	]
	coclass Launcher
	{
		[default] interface ILauncher;
	};
	[
		uuid(A045AB88-C1A6-43A6-8C53-3D7F08F11F5F),
		helpstring("MenuBuilder Class")
	]
	coclass MenuBuilder
	{
		[default] interface IMenuBuilder;
	};
};
